import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3

# Database Setup
def init_db():
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL UNIQUE,
            email TEXT,
            address TEXT
        )
    """)
    conn.commit()
    conn.close()

# Functions
def add_contact():
    name = entry_name.get()
    phone = entry_phone.get()
    email = entry_email.get()
    address = entry_address.get()
    
    if not name or not phone:
        messagebox.showerror("Error", "Name and Phone are required!")
        return
    
    try:
        conn = sqlite3.connect("contacts.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)", 
                       (name, phone, email, address))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "Contact added successfully!")
        clear_entries()
        load_contacts()
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "Phone number must be unique!")

def load_contacts():
    for row in tree.get_children():
        tree.delete(row)
    
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, phone FROM contacts")
    for row in cursor.fetchall():
        tree.insert("", tk.END, values=row)
    conn.close()

def search_contact():
    query = entry_search.get()
    for row in tree.get_children():
        tree.delete(row)
    
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, phone FROM contacts WHERE name LIKE ? OR phone LIKE ?", 
                   (f"%{query}%", f"%{query}%"))
    for row in cursor.fetchall():
        tree.insert("", tk.END, values=row)
    conn.close()

def update_contact():
    selected = tree.focus()
    if not selected:
        messagebox.showerror("Error", "No contact selected!")
        return
    
    contact_id = tree.item(selected)["values"][0]
    name = entry_name.get()
    phone = entry_phone.get()
    email = entry_email.get()
    address = entry_address.get()
    
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE contacts 
        SET name = ?, phone = ?, email = ?, address = ? 
        WHERE id = ?
    """, (name, phone, email, address, contact_id))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Contact updated successfully!")
    clear_entries()
    load_contacts()

def delete_contact():
    selected = tree.focus()
    if not selected:
        messagebox.showerror("Error", "No contact selected!")
        return
    
    contact_id = tree.item(selected)["values"][0]
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM contacts WHERE id = ?", (contact_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Contact deleted successfully!")
    load_contacts()

def select_contact(event):
    selected = tree.focus()
    if not selected:
        return
    
    contact_id, name, phone = tree.item(selected)["values"]
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM contacts WHERE id = ?", (contact_id,))
    contact = cursor.fetchone()
    conn.close()
    
    clear_entries()
    entry_name.insert(0, contact[1])
    entry_phone.insert(0, contact[2])
    entry_email.insert(0, contact[3])
    entry_address.insert(0, contact[4])

def clear_entries():
    entry_name.delete(0, tk.END)
    entry_phone.delete(0, tk.END)
    entry_email.delete(0, tk.END)
    entry_address.delete(0, tk.END)

# UI Setup
root = tk.Tk()
root.title("Contact Book")

frame = tk.Frame(root)
frame.pack(pady=10)

tk.Label(frame, text="Name").grid(row=0, column=0, padx=5, pady=5)
entry_name = tk.Entry(frame)
entry_name.grid(row=0, column=1, padx=5, pady=5)

tk.Label(frame, text="Phone").grid(row=1, column=0, padx=5, pady=5)
entry_phone = tk.Entry(frame)
entry_phone.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame, text="Email").grid(row=2, column=0, padx=5, pady=5)
entry_email = tk.Entry(frame)
entry_email.grid(row=2, column=1, padx=5, pady=5)

tk.Label(frame, text="Address").grid(row=3, column=0, padx=5, pady=5)
entry_address = tk.Entry(frame)
entry_address.grid(row=3, column=1, padx=5, pady=5)

btn_add = tk.Button(frame, text="Add Contact", command=add_contact)
btn_add.grid(row=4, column=0, padx=5, pady=10)

btn_update = tk.Button(frame, text="Update Contact", command=update_contact)
btn_update.grid(row=4, column=1, padx=5, pady=10)

btn_delete = tk.Button(frame, text="Delete Contact", command=delete_contact)
btn_delete.grid(row=4, column=2, padx=5, pady=10)

entry_search = tk.Entry(root)
entry_search.pack(pady=5)
btn_search = tk.Button(root, text="Search", command=search_contact)
btn_search.pack(pady=5)

tree = ttk.Treeview(root, columns=("ID", "Name", "Phone"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Phone", text="Phone")
tree.pack(pady=10)
tree.bind("<Double-1>", select_contact)

# Initialize
init_db()
load_contacts()

root.mainloop()
